package me.kt.jaostorage.storage;

import java.util.*;

public class WhitelistManager {

    // üîê Danh s√°ch ng∆∞·ªùi ch∆°i ƒë∆∞·ª£c whitelist (theo UUID ch·ªß => set UUID ƒë∆∞·ª£c ph√©p truy c·∫≠p)
    private final Map<UUID, Set<UUID>> whitelistMap = new HashMap<>();

    // ‚úÖ Th√™m ng∆∞·ªùi ch∆°i v√†o danh s√°ch ƒë∆∞·ª£c truy c·∫≠p kho
    public void addToWhitelist(UUID owner, UUID target) {
        whitelistMap.computeIfAbsent(owner, k -> new HashSet<>()).add(target);
    }

    // ‚úÖ Xo√° ng∆∞·ªùi ch∆°i kh·ªèi whitelist
    public void removeFromWhitelist(UUID owner, UUID target) {
        Set<UUID> allowed = whitelistMap.get(owner);
        if (allowed != null) {
            allowed.remove(target);
            if (allowed.isEmpty()) {
                whitelistMap.remove(owner);
            }
        }
    }

    // ‚úÖ Ki·ªÉm tra xem target c√≥ n·∫±m trong whitelist c·ªßa owner kh√¥ng
    public boolean isWhitelisted(UUID owner, UUID target) {
        return whitelistMap.getOrDefault(owner, Collections.emptySet()).contains(target);
    }

    // ‚úÖ L·∫•y danh s√°ch t·∫•t c·∫£ ng∆∞·ªùi ch∆°i ƒë∆∞·ª£c owner chia s·∫ª kho
    public Set<UUID> getWhitelist(UUID owner) {
        return whitelistMap.getOrDefault(owner, Collections.emptySet());
    }

    // ‚úÖ Xo√° to√†n b·ªô whitelist c·ªßa ng∆∞·ªùi ch∆°i (n·∫øu reset)
    public void clearWhitelist(UUID owner) {
        whitelistMap.remove(owner);
    }

    // ‚úÖ Ki·ªÉm tra xem c√≥ ai ƒë∆∞·ª£c chia s·∫ª kh√¥ng
    public boolean hasShared(UUID owner) {
        return whitelistMap.containsKey(owner) && !whitelistMap.get(owner).isEmpty();
    }
}