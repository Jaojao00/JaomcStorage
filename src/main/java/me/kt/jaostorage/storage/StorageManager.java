package me.kt.jaostorage.storage;

import java.io.File;
import java.io.IOException;
import java.util.*;

import me.kt.jaostorage.Main;
import org.bukkit.Material;
import org.bukkit.configuration.file.FileConfiguration;
import org.bukkit.configuration.file.YamlConfiguration;
import org.bukkit.entity.Player;

public class StorageManager {

    // üîê D·ªØ li·ªáu v·∫≠t ph·∫©m ƒë∆∞·ª£c l∆∞u theo UUID c·ªßa ng∆∞·ªùi ch∆°i
    private final Map<UUID, Map<Material, Integer>> storageData = new HashMap<>();
    private final Map<UUID, Map<Material, Integer>> playerStorage = new HashMap<>();

    // üì¶ S·ªë slot l∆∞u tr·ªØ m·ªü r·ªông (d√†nh cho n√¢ng c·∫•p dung l∆∞·ª£ng)
    private final Map<UUID, Integer> storageSlots = new HashMap<>();

    // ‚ôæÔ∏è Danh s√°ch ng∆∞·ªùi ch∆°i c√≥ ch·∫ø ƒë·ªô kho v√¥ h·∫°n
    private final Set<UUID> infinityMode = new HashSet<>();

    // üöß Gi·ªõi h·∫°n l∆∞u tr·ªØ t·ªëi ƒëa theo t·ª´ng ng∆∞·ªùi ch∆°i (n√¢ng c·∫•p theo c·∫•p ƒë·ªô)
    private final Map<UUID, Integer> storageLimit = new HashMap<>();

    // üîÅ Plugin ch√≠nh, ƒë·ªÉ d√πng khi c·∫ßn truy c·∫≠p config, file,...
    private final Main plugin;

    // üìÅ File YAML l∆∞u d·ªØ li·ªáu
    private File dataFile;
    private FileConfiguration dataConfig;

    // ‚úÖ Constructor nh·∫≠n plugin ch√≠nh v√† load file d·ªØ li·ªáu
    public StorageManager(Main plugin) {
        this.plugin = plugin;

        // üîÑ T·∫°o file YAML ƒë·ªÉ l∆∞u tr·ªØ d·ªØ li·ªáu kho
        dataFile = new File(plugin.getDataFolder(), "databeas.yml");
        if (!dataFile.exists()) {
            try {
                dataFile.createNewFile();
            } catch (IOException e) {
                e.printStackTrace();
            }
        }
        dataConfig = YamlConfiguration.loadConfiguration(dataFile);

        loadData(); // üîÅ T·∫£i d·ªØ li·ªáu t·ª´ file khi kh·ªüi ƒë·ªông
    }

    // ==============================
    // üì¶ PH·∫¶N QU·∫¢N L√ù SLOT L∆ØU TR·ªÆ
    // ==============================

    public void upgradeStorage(Player player, int slots) {
        upgradeStorage(player.getUniqueId(), slots);
    }

    public void upgradeStorage(UUID uuid, int slots) {
        storageSlots.put(uuid, getSlots(uuid) + slots);
    }

    public int getSlots(Player player) {
        return getSlots(player.getUniqueId());
    }

    public int getSlots(UUID uuid) {
        return storageSlots.getOrDefault(uuid, 0);
    }

    // ==============================
    // ‚ôæÔ∏è PH·∫¶N QU·∫¢N L√ù KHO V√î H·∫†N
    // ==============================

    public void setInfinity(Player player, boolean enabled) {
        setInfinity(player.getUniqueId(), enabled);
    }

    public void setInfinity(UUID uuid, boolean enabled) {
        if (enabled) {
            infinityMode.add(uuid);
        } else {
            infinityMode.remove(uuid);
        }
    }

    public boolean isInfinity(Player player) {
        return isInfinity(player.getUniqueId());
    }

    public boolean isInfinity(UUID uuid) {
        return infinityMode.contains(uuid);
    }

    public boolean toggleInfinity(UUID uuid) {
        if (infinityMode.contains(uuid)) {
            infinityMode.remove(uuid);
            return false;
        } else {
            infinityMode.add(uuid);
            return true;
        }
    }

    // ==============================
    // üì•üì§ PH·∫¶N QU·∫¢N L√ù V·∫¨T PH·∫®M
    // ==============================

    public int getAmount(Player player, Material material) {
        return getAmount(player.getUniqueId(), material);
    }

    public int getAmount(UUID uuid, Material material) {
        return storageData.computeIfAbsent(uuid, k -> new HashMap<>()).getOrDefault(material, 0);
    }

    public void setAmount(Player player, Material material, int amount) {
        setAmount(player.getUniqueId(), material, amount);
    }

    public void setAmount(UUID uuid, Material material, int amount) {
        storageData.computeIfAbsent(uuid, k -> new HashMap<>()).put(material, amount);
    }

    public void addItem(Player player, Material material, int amount) {
        addItem(player.getUniqueId(), material, amount);
    }

    public void addItem(UUID uuid, Material material, int amount) {
        int current = getAmount(uuid, material);
        setAmount(uuid, material, current + amount);
    }

    public boolean removeItem(Player player, Material material, int amount) {
        return removeItem(player.getUniqueId(), material, amount);
    }

    public boolean removeItem(UUID uuid, Material material, int amount) {
        int current = getAmount(uuid, material);
        if (current < amount) return false;

        setAmount(uuid, material, current - amount);
        return true;
    }

    public Map<Material, Integer> getStorage(Player player) {
        return getStorage(player.getUniqueId());
    }

    public Map<Material, Integer> getStorage(UUID uuid) {
        return storageData.getOrDefault(uuid, new HashMap<>());
    }

    public void addStorageSlots(UUID uuid, int slots) {
        int current = storageLimit.getOrDefault(uuid, 0);
        storageLimit.put(uuid, current + slots);
    }

    // ‚úÖ D√πng ƒë·ªÉ ki·ªÉm tra xem lo·∫°i item ƒë√≥ c√≥ ƒë∆∞·ª£c l∆∞u v√†o kho kh√¥ng
    public boolean isStorable(Material material) {
        return plugin.getOreConfig().getOres().contains(material);
    }

    public boolean hasStorage(UUID uuid) {
        return playerStorage.containsKey(uuid);
    }

    // ==============================
    // üíæ LOAD & SAVE FILE .YML
    // ==============================

    public void saveData() {
        for (UUID uuid : storageData.keySet()) {
            for (Material material : storageData.get(uuid).keySet()) {
                int amount = storageData.get(uuid).get(material);
                dataConfig.set(uuid.toString() + "." + material.name(), amount);
            }
        }

        try {
            dataConfig.save(dataFile);
        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    public void loadData() {
        for (String uuidStr : dataConfig.getKeys(false)) {
            UUID uuid = UUID.fromString(uuidStr);
            Map<Material, Integer> items = new HashMap<>();
            for (String matName : dataConfig.getConfigurationSection(uuidStr).getKeys(false)) {
                Material mat = Material.getMaterial(matName);
                int amount = dataConfig.getInt(uuidStr + "." + matName);
                if (mat != null) {
                    items.put(mat, amount);
                }
            }
            storageData.put(uuid, items);
        }
    }
}
