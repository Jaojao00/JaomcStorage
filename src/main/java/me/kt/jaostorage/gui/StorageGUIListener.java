package me.kt.jaostorage.gui;

import me.kt.jaostorage.Main;
import me.kt.jaostorage.storage.StorageManager;
import org.bukkit.Bukkit;
import org.bukkit.Material;
import org.bukkit.entity.Player;
import org.bukkit.event.EventHandler;
import org.bukkit.event.Listener;
import org.bukkit.event.inventory.InventoryClickEvent;
import org.bukkit.event.player.AsyncPlayerChatEvent;
import org.bukkit.inventory.ItemStack;

import java.util.HashMap;
import java.util.Map;

public class StorageGUIListener implements Listener {

    private final Main plugin;
    private final StorageManager storageManager;
    private final StorageGUI storageGUI;

    // D√πng ƒë·ªÉ t·∫°m l∆∞u tr·∫°ng th√°i ch·ªù nh·∫≠p li·ªáu t·ª´ chat
    private final Map<Player, ActionContext> chatWaiting = new HashMap<>();

    public StorageGUIListener(Main plugin) {
        this.plugin = plugin;
        this.storageManager = plugin.getStorageManager();
        this.storageGUI = plugin.getStorageGUI();
    }

    // üéØ Khi ng∆∞·ªùi ch∆°i click v√†o v·∫≠t ph·∫©m trong kho
    @EventHandler
    public void onInventoryClick(InventoryClickEvent e) {
        Player player = (Player) e.getWhoClicked();

        // Ch·ªâ x·ª≠ l√Ω GUI li√™n quan kho
        String title = e.getView().getTitle();
        if (!title.contains("Kho√°ng s·∫£n") && !title.contains("‚öô")) return;

        // Hu·ª∑ thao t√°c m·∫∑c ƒë·ªãnh (ngƒÉn l·∫•y v·∫≠t ph·∫©m ra)
        e.setCancelled(true);

        // B·ªè qua n·∫øu kh√¥ng c√≥ v·∫≠t ph·∫©m
        if (e.getClickedInventory() == null || e.getCurrentItem() == null) return;

        // B·ªè qua n·∫øu l√† k√≠nh vi·ªÅn
        Material clickedType = e.getCurrentItem().getType();
        if (clickedType.name().contains("GLASS_PANE")) return;

        // üëâ N·∫øu ƒëang ·ªü GUI ch√≠nh (danh s√°ch kho√°ng s·∫£n)
        if (title.contains("Kho√°ng s·∫£n")) {
            storageGUI.openItemMenu(player, clickedType);
            return;
        }

        // üëâ N·∫øu ƒëang ·ªü GUI thao t√°c (‚öô lo·∫°i kho√°ng s·∫£n)
        if (title.contains("‚öô")) {
            String displayName = e.getCurrentItem().getItemMeta() != null
                    ? e.getCurrentItem().getItemMeta().getDisplayName()
                    : "";

            String matName = title.replace("‚öô ", "").trim();
            Material material = Material.matchMaterial(matName.toUpperCase());

            if (material == null) {
                player.sendMessage("‚ùå Kh√¥ng x√°c ƒë·ªãnh ƒë∆∞·ª£c lo·∫°i v·∫≠t ph·∫©m!");
                return;
            }

            if (displayName.contains("C·∫•t")) {
                player.closeInventory();
                player.sendMessage("‚úè Nh·∫≠p s·ªë l∆∞·ª£ng c·∫ßn C·∫§T v√†o kho ho·∫∑c g√µ 'all':");
                chatWaiting.put(player, new ActionContext(material, ActionType.STORE));

            } else if (displayName.contains("R√∫t")) {
                player.closeInventory();
                player.sendMessage("‚úè Nh·∫≠p s·ªë l∆∞·ª£ng c·∫ßn R√öT kh·ªèi kho ho·∫∑c g√µ 'all':");
                chatWaiting.put(player, new ActionContext(material, ActionType.WITHDRAW));

            } else if (displayName.contains("B√°n")) {
                int amount = storageManager.getAmount(player, material);
                if (amount > 0) {
                    storageManager.setAmount(player, material, 0);
                    player.sendMessage("üí∞ ƒê√£ b√°n to√†n b·ªô " + material.name() + " v·ªõi s·ªë l∆∞·ª£ng " + amount);
                } else {
                    player.sendMessage("‚ùå Kh√¥ng c√≥ " + material.name() + " trong kho!");
                }
                player.closeInventory();
            }
        }
    }

    // üßæ X·ª≠ l√Ω khi ng∆∞·ªùi ch∆°i nh·∫≠p s·ªë l∆∞·ª£ng t·ª´ chat
    @EventHandler
    public void onChat(AsyncPlayerChatEvent e) {
        Player player = e.getPlayer();
        if (!chatWaiting.containsKey(player)) return;

        e.setCancelled(true);
        ActionContext context = chatWaiting.remove(player);
        String message = e.getMessage();

        int amount;
        if (message.equalsIgnoreCase("all")) {
            if (context.action == ActionType.STORE) {
                amount = (int) player.getInventory().all(context.material).values().stream()
                        .mapToInt(ItemStack::getAmount).sum();
            } else {
                amount = storageManager.getAmount(player, context.material);
            }
        } else {
            try {
                amount = Integer.parseInt(message);
                if (amount <= 0) throw new NumberFormatException();
            } catch (NumberFormatException ex) {
                player.sendMessage("‚ùå S·ªë l∆∞·ª£ng kh√¥ng h·ª£p l·ªá!");
                return;
            }
        }

        Bukkit.getScheduler().runTask(plugin, () -> {
            if (context.action == ActionType.STORE) {

                // ‚úÖ T√≠nh t·ªïng s·ªë l∆∞·ª£ng v·∫≠t ph·∫©m trong t√∫i
                int totalAvailable = 0;
                for (ItemStack item : player.getInventory().getContents()) {
                    if (item != null && item.getType() == context.material) {
                        totalAvailable += item.getAmount();
                    }
                }

                // ‚ùå N·∫øu kh√¥ng c√≥ v·∫≠t ph·∫©m ƒë·ªÉ c·∫•t
                if (totalAvailable == 0) {
                    player.sendMessage("‚ùå B·∫°n kh√¥ng c√≥ v·∫≠t ph·∫©m " + context.material.name() + " trong t√∫i ƒë·ªÉ c·∫•t!");
                    return;
                }

                // üì¶ C·∫•t t·ªëi ƒëa b·∫±ng s·ªë l∆∞·ª£ng c√≥ trong t√∫i
                int toStore = Math.min(amount, totalAvailable);
                int remaining = toStore;

                for (int i = 0; i < player.getInventory().getSize(); i++) {
                    ItemStack item = player.getInventory().getItem(i);
                    if (item == null || item.getType() != context.material) continue;

                    int stackAmount = item.getAmount();
                    int toRemove = Math.min(stackAmount, remaining);
                    item.setAmount(stackAmount - toRemove);

                    if (item.getAmount() <= 0) {
                        player.getInventory().setItem(i, null);
                    }

                    remaining -= toRemove;
                    if (remaining <= 0) break;
                }

                storageManager.addItem(player, context.material, toStore);
                player.sendMessage("üì¶ ƒê√£ c·∫•t " + toStore + " " + context.material.name() + " v√†o kho.");

            } else {
                // ‚úÖ R√∫t v·∫≠t ph·∫©m: ch·ªâ r√∫t v·ª´a ƒë·ªß inventory
                int storedAmount = storageManager.getAmount(player, context.material);
                if (storedAmount <= 0) {
                    player.sendMessage("‚ùå Kh√¥ng c√≥ " + context.material.name() + " trong kho!");
                    return;
                }

                // üîç T√≠nh s·ªë slot tr·ªëng
                int emptySlots = 0;
                for (ItemStack item : player.getInventory().getStorageContents()) {
                    if (item == null || item.getType() == Material.AIR) emptySlots++;
                }

                int maxStackSize = context.material.getMaxStackSize();
                int maxWithdrawable = emptySlots * maxStackSize;

                if (maxWithdrawable <= 0) {
                    player.sendMessage("‚ùå T√∫i ƒë·ªì c·ªßa b·∫°n ƒë√£ ƒë·∫ßy. Kh√¥ng th·ªÉ r√∫t th√™m.");
                    return;
                }

                int withdrawAmount = Math.min(amount, Math.min(storedAmount, maxWithdrawable));

                boolean success = storageManager.removeItem(player, context.material, withdrawAmount);
                if (success) {
                    while (withdrawAmount > 0) {
                        int toGive = Math.min(withdrawAmount, maxStackSize);
                        player.getInventory().addItem(new ItemStack(context.material, toGive));
                        withdrawAmount -= toGive;
                    }
                    player.sendMessage("üì§ ƒê√£ r√∫t v·∫≠t ph·∫©m t·ª´ kho v√†o t√∫i (v·ª´a ƒë·ªß t√∫i ƒë·ªì).");
                } else {
                    player.sendMessage("‚ùå Kh√¥ng ƒë·ªß " + context.material.name() + " ƒë·ªÉ r√∫t!");
                }
            }
        });
    }

    // üß† Enum & Context ph·ª• tr·ª£
    enum ActionType { STORE, WITHDRAW }

    class ActionContext {
        Material material;
        ActionType action;

        ActionContext(Material material, ActionType action) {
            this.material = material;
            this.action = action;
        }
    }
}
